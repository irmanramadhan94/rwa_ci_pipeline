name: RWA CI Pipeline # Menentukan nama pipeline CI

on: # Menentukan event yang memicu pipeline
  push: # Pipeline akan berjalan saat ada push
    branches: [main, ci-cd-pipeline] # Hanya pada branch main dan ci-cd-pipeline

jobs: # Mendefinisikan pekerjaan (jobs) dalam pipeline
  build: # Job untuk membangun aplikasi
    runs-on: ubuntu-latest # Menentukan runner yang digunakan (Ubuntu terbaru)
    steps: # Langkah-langkah dalam job build
      - uses: actions/checkout@v3 # Mengambil kode dari repository
      - name: Setup Node # Menyiapkan Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Versi Node.js yang digunakan
      - name: Install dependencies # Menginstal dependensi proyek
        run: npm install --legacy-peer-deps
      - name: Set dummy environment variables # Menambahkan variabel lingkungan dummy
        run: |
          echo "VITE_AUTH0=false" >> .env
          echo "VITE_GOOGLE=false" >> .env
          echo "VITE_AWS_COGNITO=false" >> .env
          echo "VITE_OKTA=false" >> .env
      - name: Copy mock AWS Cognito files # Menyalin file mock AWS Cognito
        run: npm run predev:cognito:ci
      - name: Build Frontend # Membangun aplikasi frontend
        run: npm run build:ci

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Build Frontend
          path: build

  api-test: # Job untuk pengujian API
    needs: build # Job ini bergantung pada job build
    runs-on: ubuntu-latest # Menentukan runner yang digunakan
    steps: # Langkah-langkah dalam job api-test
      - uses: actions/checkout@v3 # Mengambil kode dari repository
      - name: Setup Node # Menyiapkan Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Versi Node.js yang digunakan
      - name: Install dependencies # Menginstal dependensi proyek
        run: npm install --legacy-peer-deps
      - name: Run Cypress API Test # Menjalankan pengujian API menggunakan Cypress
        uses: cypress-io/github-action@v6
        with:
          build: npm run build:ci # Perintah build
          start: npm start # Perintah untuk memulai server
          wait-on: 'http://localhost:3000' # Menunggu server berjalan
          spec: cypress/tests/api/*.spec.ts # Lokasi file spesifikasi pengujian API

  ui-test: # Job untuk pengujian UI
    needs: build # Job ini bergantung pada job build
    runs-on: ubuntu-latest # Menentukan runner yang digunakan
    steps: # Langkah-langkah dalam job ui-test
      - uses: actions/checkout@v3 # Mengambil kode dari repository
      - name: Setup Node # Menyiapkan Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Versi Node.js yang digunakan
      - name: Install dependencies # Menginstal dependensi proyek
        run: npm install --legacy-peer-deps
      - name: Run Cypress UI Test # Menjalankan pengujian UI menggunakan Cypress
        uses: cypress-io/github-action@v6
        with:
          build: npm run build:ci # Perintah build
          start: npm start # Perintah untuk memulai server
          wait-on: 'http://localhost:3000' # Menunggu server berjalan
          spec: cypress/tests/ui/*.spec.ts # Lokasi file spesifikasi pengujian UI

  deploy-frontend: # Job untuk melakukan deploy frontend
    needs: [api-test, ui-test] # Job ini bergantung pada job api-test dan ui-test
    runs-on: ubuntu-latest # Menentukan runner yang digunakan (Ubuntu terbaru)
    steps: # Langkah-langkah dalam job deploy-frontend
      - name: Checkout repository
        uses: actions/checkout@v3 # Mengambil kode dari repository
      
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: Build Frontend
          path: build

      - name: Deploy to Vercel # Menentukan nama langkah untuk deploy ke Vercel
        uses: amondnet/vercel-action@v25 # Menggunakan action pihak ketiga untuk deploy ke Vercel
        with: # Menyediakan parameter yang diperlukan untuk action
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Token autentikasi untuk Vercel
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }} # ID organisasi di Vercel
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }} # ID proyek di Vercel
          working-directory: ./ # Direktori kerja tempat kode frontend berada
          scope: ${{ secrets.VERCEL_SCOPE }} # Scope atau username Vercel yang digunakan

  deploy-backend:
    needs: [api-test, ui-test]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
